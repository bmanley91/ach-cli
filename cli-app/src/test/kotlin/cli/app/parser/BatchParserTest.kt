package cli.app.parser

import cli.app.model.BatchRange
import org.assertj.core.api.Assertions.assertThat
import org.assertj.core.api.Assertions.assertThatThrownBy
import kotlin.test.Test

class BatchParserTest {
    @Test
    fun `should return a list of batch ranges`() {
        val lines = listOf(
            "101 081000032 0180362811503042207A094101Some Bank              Your Company Inc       #A000001",
            "5220Your Company Inc                    0018036281WEBTrnsNicknaMar 5 150305   1081000030000000",
            "622081000210123456789012345670000003521RAj##23920rjf31John Doe              A10081000030000000",
            "6220810002105654221          0000002300RAj##32b1kn1bb3Bob Dole              A10081000030000001",
            "6220810002105654221          0000002499RAj##765kn4    Adam Something        A10081000030000002",
            "6220810002105654221          0000001000RAj##3j43kj4   James Bond            A10081000030000003",
            "822000000400324000840000000000000000000093200018036281                         081000030000000",
            "5220Your Company Inc                    0018036281WEBTrnsNicknaMar 16150316   1081000030000001",
            "6220810002105654221          0000017500RAj##8k765j4k32Luke Skywalker        A10081000030000004",
            "822000000100081000210000000000000000000175000018036281                         081000030000001",
            "5225Your Company Inc                    0018036281PPDTrnsNicknaMar 6 150306   1081000030000002",
            "627101000019923698412584     0000015000RAj##765432hj  Jane Doe              A10081000030000005",
            "822500000100101000010000000150000000000000000018036281                         081000030000002",
            "9000003000002000000060050600106000000015000000000026820                                       ",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
        )

        val batchRanges = getBatchRanges(lines)

        assertThat(batchRanges).containsExactlyElementsOf(listOf(
            BatchRange(1, 6),
            BatchRange(7, 9),
            BatchRange(10, 12)
        ))
    }

    @Test
    fun `should throw an exception if a batch header is found in an unexpected row`() {
        val lines = listOf(
            "101 081000032 0180362811503042207A094101Some Bank              Your Company Inc       #A000001",
            "5220Your Company Inc                    0018036281WEBTrnsNicknaMar 5 150305   1081000030000000",
            "622081000210123456789012345670000003521RAj##23920rjf31John Doe              A10081000030000000",
            "6220810002105654221          0000002300RAj##32b1kn1bb3Bob Dole              A10081000030000001",
            "6220810002105654221          0000002499RAj##765kn4    Adam Something        A10081000030000002",
            "6220810002105654221          0000001000RAj##3j43kj4   James Bond            A10081000030000003",
            "822000000400324000840000000000000000000093200018036281                         081000030000000",
            "5220Your Company Inc                    0018036281WEBTrnsNicknaMar 16150316   1081000030000001",
            "6220810002105654221          0000017500RAj##8k765j4k32Luke Skywalker        A10081000030000004",
            "522000000100081000210000000000000000000175000018036281                         081000030000001",
            "5225Your Company Inc                    0018036281PPDTrnsNicknaMar 6 150306   1081000030000002",
            "627101000019923698412584     0000015000RAj##765432hj  Jane Doe              A10081000030000005",
            "822500000100101000010000000150000000000000000018036281                         081000030000002",
            "9000003000002000000060050600106000000015000000000026820                                       ",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
        )
        val unboundHeaderLine = 7

        assertThatThrownBy {
            getBatchRanges(lines)
        }.hasMessage("Found batch header without batch control on line $unboundHeaderLine")
    }

    @Test
    fun `should throw an exception if a batch control is found without a header`() {
        val lines = listOf(
            "101 081000032 0180362811503042207A094101Some Bank              Your Company Inc       #A000001",
            "5220Your Company Inc                    0018036281WEBTrnsNicknaMar 5 150305   1081000030000000",
            "622081000210123456789012345670000003521RAj##23920rjf31John Doe              A10081000030000000",
            "6220810002105654221          0000002300RAj##32b1kn1bb3Bob Dole              A10081000030000001",
            "6220810002105654221          0000002499RAj##765kn4    Adam Something        A10081000030000002",
            "6220810002105654221          0000001000RAj##3j43kj4   James Bond            A10081000030000003",
            "822000000400324000840000000000000000000093200018036281                         081000030000000",
            "8220Your Company Inc                    0018036281WEBTrnsNicknaMar 16150316   1081000030000001",
            "6220810002105654221          0000017500RAj##8k765j4k32Luke Skywalker        A10081000030000004",
            "822000000100081000210000000000000000000175000018036281                         081000030000001",
            "5225Your Company Inc                    0018036281PPDTrnsNicknaMar 6 150306   1081000030000002",
            "627101000019923698412584     0000015000RAj##765432hj  Jane Doe              A10081000030000005",
            "822500000100101000010000000150000000000000000018036281                         081000030000002",
            "9000003000002000000060050600106000000015000000000026820                                       ",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
        )
        val badControlIndex = 7

        assertThatThrownBy {
            getBatchRanges(lines)
        }.hasMessage("Found batch control without preceding batch header on line $badControlIndex")
    }
}
